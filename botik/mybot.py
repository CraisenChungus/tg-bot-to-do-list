import asyncio #module import
import logging #imports logging for logs in json

from sqlalchemy import update #module import


from telegram import (    #whole library import in order to create telegram bot
    Update,  #class Update
    ReplyKeyboardMarkup, #for keyboard
    InlineKeyboardMarkup, #unused
    InlineKeyboardButton  #unused
)
from telegram.ext import filters, MessageHandler, ApplicationBuilder, CommandHandler, ContextTypes, CallbackQueryHandler
# filters ‚Äî —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –∏ —Ç.–¥.)
# MessageHandler ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
# ApplicationBuilder ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ Telegram-–±–æ—Ç–∞
# CommandHandler ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, /start)
# ContextTypes ‚Äî —Ç–∏–ø–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ (–¥–æ—Å—Ç—É–ø –∫ bot, user_data –∏ –¥—Ä.)
# CallbackQueryHandler ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ inline-–∫–Ω–æ–ø–∫–∏


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)



class Task:                                                            # Creating a class named Task
    def __init__(self, value=None, date=None, user_input=None):        # Constructor method with parameters that creates class objects. And any time we call the class Task, we give values for its parameters
        self.value = value                                             # Says that object value in Task gets its value from constructor parameter
        self.date = date                                               # Says that object date in Task gets its value from constructor parameter
        self.user_input = user_input                                   # Says that object user_input in Task gets its value from constructor parameter

    def __str__(self):                                                 # Special method that defines how object is converted to string (e.g., when printed)
        return f"üìå {self.value}\nüìÖ –î–æ: {self.date}\nüí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {self.user_input}" # Nicely formats the task as readable text

buttons1 = [                                                           #Here, we are creating a variable that is going to contain LIST and will be used as text for buttons
    ["–î–∞—Ç—å –∑–∞–¥–∞—á—É", "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"],                                 #The buttons themselves; upper block
    ['–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏', '–ü—Ä–∏–∫–æ–ª—å—á–∏–∫']                               #The buttons themselves; lower block

]                                                                      #End of the LIST
firstmenu = ReplyKeyboardMarkup(buttons1, resize_keyboard=True)        #Initializes a keyboard from buttons1; resize_keyboard=True makes buttons fit the screen


buttons2 = [                                                           #The same buttons var, but it will be shown only for returning to the main menu
    ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]                                                   #The button itself
]
onlymainmenu = ReplyKeyboardMarkup(buttons2, resize_keyboard=True)     #Initializes a keyboard from buttons2; resize_keyboard=True makes buttons fit the screen



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):   #asynced func that will be reacting on command /start
    await context.bot.send_photo(chat_id=update.effective_chat.id, photo="img.png") #Sends an image using the bot's send_photo() method
                                                                                    #await pauses execution until the image is fully sent
    await context.bot.send_message(chat_id=update.effective_chat.id,text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ì–æ—Å–ø–æ–¥–∏–Ω! –Ø - –ß—É–Ω–≥—É—Å–∏–∫-—Ç—è–Ω! –†–∞–¥–∞ –≤–∞–º —Å–ª—É–∂–∏—Ç—å! –ü–æ–∫–∞ —á—Ç–æ —è –º–æ–≥—É —Ç–æ–ª—å–∫–æ –í–∞—Å –∫—Ä–∏–≤–ª—è—Ç—å, –ì–æ—Å–ø–æ–¥–∏–Ω. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –∏ —è —ç—Ç–æ —Å–∫–∞–∂—É!", reply_markup=firstmenu)
                                                                                     #Line above makes bot send a message
async def tasking(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_input = update.message.text
    step = context.user_data.get('task_step')
    if user_input == "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo="img.png")
        await context.bot.send_message(chat_id=update.effective_chat.id,
                                       text="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ì–æ—Å–ø–æ–¥–∏–Ω! –Ø - –ß—É–Ω–≥—É—Å–∏–∫-—Ç—è–Ω! –†–∞–¥–∞ –≤–∞–º —Å–ª—É–∂–∏—Ç—å! –Ø –º–æ–≥—É –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –≤–∞—à–∏ –∑–∞–¥–∞—á–∞–∏, —á—Ç–æ –±—ã –≤—ã –Ω–∏—á–µ–≥–æ –Ω–µ –∑–∞–±—ã–ª–∏! –î–∞ –∏ –Ω–µ —Ç–æ–ª—å–∫–æ —ç—Ç–æ –º–æ–≥—É <3",
                                       reply_markup=firstmenu)
    if user_input == "–ü—Ä–∏–∫–æ–ª—å—á–∏–∫":
        await update.message.reply_text("–Ø –ª—é–±–ª—é –≤–∞—Å, –ì–æ—Å–ø–æ–¥–∏–Ω", reply_markup=onlymainmenu)



    if user_input == "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É":
        tasks = context.user_data.get('tasks', [])
        if not tasks:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –ì–æ—Å–ø–æ–¥–∏–Ω.", reply_markup=firstmenu)
        else:
            task_list = "\n\n".join(f"{i + 1}. {t}" for i, t in enumerate(tasks))
            await update.message.reply_text(
                f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n{task_list}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:")
            context.user_data['task_step'] = 'delete'
        return

    if step == 'delete':
        try:
            index = int(user_input) - 1
            tasks = context.user_data.get('tasks', [])

            if 0 <= index < len(tasks):
                removed = tasks.pop(index)
                await update.message.reply_text(f"‚úÖ –£–¥–∞–ª–µ–Ω–∞ –∑–∞–¥–∞—á–∞:\n{removed}", reply_markup=firstmenu)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏, –ì–æ—Å–ø–æ–¥–∏–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        except ValueError:
            await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–æ–º–µ—Ä ‚Äî —á–∏—Å–ª–æ, –ì–æ—Å–ø–æ–¥–∏–Ω.")

        context.user_data['task_step'] = None  # —Å–±—Ä–æ—Å
        return

    if user_input == "–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞—á–∏":
        tasks = context.user_data.get('tasks', [])
        if not tasks:
            await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–¥–∞—á, –ì–æ—Å–ø–æ–¥–∏–Ω ü´°", reply_markup=firstmenu)
        else:
            msg = "\n\n".join(f"{i + 1}. {t}" for i, t in enumerate(tasks))
            await update.message.reply_text(f"–í–∞—à–∏ –∑–∞–¥–∞—á–∏:\n\n{msg}", reply_markup=firstmenu)
        return

    # üü¢ –®–∞–≥ 1 ‚Äî –Ω–∞—á–∞–ª–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É
    if user_input == "–î–∞—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–û–ø–∏—à–∏—Ç–µ –∑–∞–¥–∞—á–∫—É, –ì–æ—Å–ø–æ–¥–∏–Ω!")
        context.user_data['task_step'] = 'value'
        return

    # üü† –®–∞–≥ 2 ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
    if step == 'value':
        context.user_data['task_value'] = user_input
        context.user_data['task_step'] = 'date'
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-07-15):")
        return

    # üü° –®–∞–≥ 3 ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –¥–∞—Ç—É
    if step == 'date':
        context.user_data['task_date'] = user_input
        context.user_data['task_step'] = 'comment'
        await update.message.reply_text("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:")
        return

    # üîµ –®–∞–≥ 4 ‚Äî –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π + —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏
    if step == 'comment':
        context.user_data['task_comment'] = user_input
        context.user_data['task_step'] = None  # –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è

        task = Task(
            value=context.user_data['task_value'],
            date=context.user_data['task_date'],
            user_input=context.user_data['task_comment']
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ —Å–ø–∏—Å–æ–∫
        if 'tasks' not in context.user_data:
            context.user_data['tasks'] = []
        context.user_data['tasks'].append(task)

        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞, –ì–æ—Å–ø–æ–¥–∏–Ω:\n\n{task}",
            reply_markup=firstmenu
        )
        return


if __name__ == '__main__':
    application = ApplicationBuilder().token('8050992129:AAHavgyM320ilerfmo3LOkc2wkmNy3hBwTM').build()
    # echo_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), echo)
    tasking_handler = MessageHandler(filters.TEXT & (~filters.COMMAND), tasking)
    application.add_handler(tasking_handler)

    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)
    # application.add_handler(echo_handler)

    application.run_polling()

